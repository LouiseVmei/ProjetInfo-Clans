package strats;
import clans.Terrain;
import java.util.Random;
import java.util.ArrayList;
import java.util.List;
/**
 * Note (Anthony Fleury) : 
 * Cette strategie est a modifier et a adapter pour que vous puissiez rendre la votre.
 * Pour la modifier, avec le bouton droit, faite un Refactor, Rename et donnez lui le nom de votre classe 
 * StratX avec X votre numero de rendu. 
 * Une fois fait, completez CORRECTEMENT les methodes getName et getGroupes.
 * Vous n'aurez ensuite qu'a completer le code de votre propre strategie, a vous de jouer !
 */



/**
 * @author humeau
 */
public class Strat11 implements Strategie{
    Random rand;
    int Destination;
    int[] res;
    int Source;
    int Destination_malusvoisin;
    int Destination_bonusvoisin;
    int Destination_almost_bonus;
    
    public Strat11 (){
        super();
        rand= new Random();
        Destination = 0;
        res= new int[2];
        Source = 0;
        Destination_malusvoisin = 0;
        Destination_bonusvoisin =  0;
        Destination_almost_bonus = 0;
    }

    @Override
    public int[] mouvement(Terrain [] _plateau, int _myColor, int [] _colorScore, int _myScore, int _opponentScore, int [] _opponentMov, int [] _opponentVillages){
        int nbChoix= Tools.getNbSourceValide(_plateau);                             //on récupère le nb de source valide
        int src = 0;    
        int dest =0;
        boolean scoreMax = scoreMax(_myColor, _colorScore);
        int[] sourcesPossibles = Tools.getSource(_plateau);
        int src_prio_0 = 0;
        int dest_prio_0 = 0;
        int src_prio_1= 0;
        int dest_prio_1 = 0;
        int src_prio_3= 0;
        int dest_prio_3 = 0;
        int src_prio_4= 0;
        int dest_prio_4 = 0;
        int src_prio_5= 0;
        int dest_prio_5 = 0;
        int src_prio_6= 0;
        int dest_prio_6 = 0;

        if(scoreMax){           // Score max-> on empêche l'adversaire de marquer des points
            for(int k = 0; k< sourcesPossibles.length; k++){
                int source = sourcesPossibles[k];
                
            if(_plateau[source].getCabanes(_myColor) <= 1){
                
                if(MalusVoisin(source, _plateau, _myColor)){
                    src_prio_0 = source;
                    src_prio_0 = Destination_malusvoisin;
                }
                
                else{
                    int voisin = Tools.getVoisinsDispo(_plateau, source)[0];
                    if(_plateau[source].getNbVoisins() == 1 && 2 <= _plateau[voisin].getNbVoisins()){
                        source = voisin;
                        int nbVoisins = Tools.getNbVoisinDispo(_plateau, voisin);
                        int n = Tools.getVoisinsDispo(_plateau, src_prio_1)[rand.nextInt(nbVoisins)];
                        while(_plateau[n].getNbCabane() >= 7){
                            n = Tools.getVoisinsDispo(_plateau, src_prio_1)[rand.nextInt(nbVoisins)];
                        }
                        src_prio_1 = voisin;
                        dest_prio_1 = n;
                    }
                    
                    
                    
                }
            }

            }
            
        }
        
        
        else{       //Score pas max-> marquer des points
            
            for(int k = 0; k< sourcesPossibles.length; k++){
                int source = sourcesPossibles[k];
            
                if(BonusPossible(source,_plateau,_myColor )){
                    src_prio_3 = source;
                    dest_prio_3 = Destination_bonusvoisin;
                }
                
                else{
                    if(AlmostVoisin(source, _plateau, _myColor)){
                        src_prio_4 = source;
                        dest_prio_4 = Destination_almost_bonus;
                    }
                    else{
                        if(_plateau[source].getCabanes(_myColor) <= 1){
                            
                            if(MalusVoisin(source,_plateau, _myColor)){
                                src_prio_5 = source;
                                int nbVoisins = Tools.getNbVoisinDispo(_plateau, source);
                                int n = Tools.getVoisinsDispo(_plateau, src_prio_5)[rand.nextInt(nbVoisins)];
                                while(_plateau[n].getNbCabane() >= 7 && n == Destination_malusvoisin){  //On évite les malus
                                     n = Tools.getVoisinsDispo(_plateau, src_prio_5)[rand.nextInt(nbVoisins)];
                                }
                                src_prio_5 = source;
                                dest_prio_5 = n;
                            }
                            
                            else{
                                src_prio_6 = source;
                                int nbVoisins = Tools.getNbVoisinDispo(_plateau, source);
                                int n = Tools.getVoisinsDispo(_plateau, src_prio_6)[rand.nextInt(nbVoisins)];
                                while(_plateau[n].getNbCabane() >= 7 ){  //On évite les malus
                                     n = Tools.getVoisinsDispo(_plateau, src_prio_6)[rand.nextInt(nbVoisins)];
                                }
                                dest_prio_6 = n;
                                
                            }
                        }
                    }
                }
            }
            
        }
        if(dest_prio_0 != 0 && src_prio_0 !=  0){
            res[0] = src_prio_0;
            res[1] = dest_prio_0;
            return res;
        }
        if(dest_prio_1 != 0 && src_prio_1 !=  0){
            res[0] = src_prio_1;
            res[1] = dest_prio_1;
            //System.out.println("Coup 1");
            return res;
        }
        if(dest_prio_3 != 0 && src_prio_3 !=  0){
            res[0] = src_prio_3;
            res[1] = dest_prio_3;
            //System.out.println("Coup 3");
            return res;
        }
        if(dest_prio_4 != 0 && src_prio_4 !=  0){
            res[0] = src_prio_4;
            res[1] = dest_prio_4;
            //System.out.println("Coup 4");
            return res;
        }
        if(dest_prio_5 != 0 && src_prio_5 !=  0){
            res[0] = src_prio_5;
            res[1] = dest_prio_5;
            //System.out.println("Coup 5");
            return res;
        }
        if(dest_prio_6 != 0 && src_prio_6 !=  0){
            res[0] = src_prio_6;
            res[1] = dest_prio_6;
            //System.out.println("Coup 6");
            return res;
        }
        else{
            //SI vraiment aucunes de TOUTES ces possibilitées, on joue random (pour ne pas faire planter dans ce cas TRES rare)
            src= Tools.getSource(_plateau)[rand.nextInt(nbChoix)];              
            int nbVoisin= Tools.getNbVoisinDispo(_plateau, src);         
            dest= Tools.getVoisinsDispo(_plateau, src)[rand.nextInt(nbVoisin)];
            //System.out.println("random");
        }
             

        res[0]= src;
        res[1]=dest;
        return res;
    }  

    @Override
    public int[] ordre( int[] _villages ){   
        Random rand = new Random();
        int a,tmp;
        // on melange le tableau des villages
        for (int i=0; i<_villages.length; i++){
            a=rand.nextInt(_villages.length);
            tmp=_villages[a];
            _villages[a]=_villages[i];
            _villages[i]=tmp;
        }
        //on retourne le tableau mélangé
        return _villages;
    }
    
    /**
     * Remplissez cette méthode avec le bon format expliqué ci-dessous
     * @return le nom des élèves (sous le format NOM1_NOM2) 
     * NOM1 et NOM2 sont uniquement les noms de famille de votre binome
     */
    public String getName(){
        return "PARIS_CALCOEN_VILLETTE_MORIN";
    }

    public String getGroupe(){
        return "1";
    }
    
    public boolean BonusPossible(int sourcesPossibles, Terrain [] _plateau, int myColor){
        int nb_villages = Tools.countVillage(_plateau); //nombre de villages sur le plateau
        int ere_actuelle = Tools.age(nb_villages);  //age actuel
            for(int j = 0; j<= 4;j++ ){     //numéro des couleurs
                if(_plateau[sourcesPossibles].getCabanes(j) == myColor){     //Cases qui contiennent mas couleur
                    int nb_voisins = _plateau[sourcesPossibles].getNbVoisins();  //Nombre de voisins de cette case
                    String nature_case = _plateau[sourcesPossibles].getType(); // "foret", "montagne",...
                    for(int k = 0; k< nb_voisins; k++){
                        int voisin = _plateau[sourcesPossibles].getVoisin(k);    //On test chaque voisin un par un
                        boolean voisinEstDispo = test(Tools.getVoisinsDispo(_plateau, sourcesPossibles), voisin);    //On s'assure que le voisin n'est pas une case vide
                        if(voisinEstDispo){
                            String s = _plateau[voisin].getType();
                            if(s.equals("foret") && ere_actuelle <= 4 ){
                                Destination_bonusvoisin = voisin;
                                return true  ;
                            }
                            else if(s.equals("montagne") && ere_actuelle <= 7 && ere_actuelle >=5 ){
                                Destination_bonusvoisin = voisin;
                                return true  ;
                            }
                            else if(s.equals("champ") && ere_actuelle <= 9 && ere_actuelle >=8){
                                Destination_bonusvoisin = voisin;
                                return true  ;
                            }
                            else if(s.equals("plaine") && ere_actuelle <= 11 && ere_actuelle >=10){
                                Destination_bonusvoisin = voisin;
                                return true  ;
                            }
                        }
                    }
                }
            }
        
        return false;
    }
    
    public boolean MalusVoisin(int sourcesPossibles, Terrain [] _plateau, int myColor){
        int nb_villages = Tools.countVillage(_plateau); //nombre de villages sur le plateau
        int ere_actuelle = Tools.age(nb_villages);  //age actuel
                            
            for(int j = 0; j<= 4;j++ ){     //numéro des couleurs
                if(_plateau[sourcesPossibles].getCabanes(j) != myColor){     //Cases qui ne contiennent pas ma couleur
                    int nb_voisins = _plateau[sourcesPossibles].getNbVoisins();  //Nombre de voisins de cette case
                    String nature_case = _plateau[sourcesPossibles].getType(); // "foret", "montagne",...
                    for(int k = 0; k< nb_voisins; k++){
                        int voisin = _plateau[sourcesPossibles].getVoisin(k);    //On test chaque voisin un par un
                        boolean voisinEstDispo = test(Tools.getVoisinsDispo(_plateau, sourcesPossibles), voisin);    //On s'assure que le voisin n'est pas une case vide
                        if(voisinEstDispo){
                            String s = _plateau[voisin].getType();
                            if(s.equals("montagne") && ere_actuelle <= 4 ){
                                Destination_malusvoisin = voisin;
                                return true  ;
                            }
                            else if(s.equals("plaine") && ere_actuelle <= 7 && ere_actuelle >=5 ){
                                Destination_malusvoisin = voisin;
                                return true  ;
                            }
                            else if(s.equals("foret") && ere_actuelle <= 9 && ere_actuelle >=8){
                                Destination_malusvoisin = voisin;
                                return true  ;
                            }
                            else if(s.equals("champ") && ere_actuelle <= 11 && ere_actuelle >=10){
                                Destination_malusvoisin = voisin;
                                return true  ;
                            }
                        }
                    }
                }
            }
        
        return false;
    }
    
    public boolean test(int[] T,int valeurATrouver){
        
         for(int i=0;i<T.length;i++)
        {
            if(T[i]==valeurATrouver)    // On parcours le tableau et on test si la valeur recherchée est présente
            {
                return true;
            }
        }
         return false ;
    }
    
    public boolean scoreMax(int _myColor, int[] colorScore){
        
        for (int i=0; i<colorScore.length; i++){
            if (colorScore[_myColor] <= colorScore[i]){
                return false;
            }
          
        }
        return true;
    }
    
   
    
   public boolean AlmostVoisin(int i, Terrain[] _plateau, int myColor){
        boolean PresqueVoisin = false;
        for (int k=0; k<(Tools.getVoisinsDispo(_plateau,i).length); k++){
            if (BonusPossible(Tools.getVoisinsDispo(_plateau,i)[k], _plateau, myColor)){
                Destination_almost_bonus = i;
                PresqueVoisin = true;
            }
        }
        return (PresqueVoisin);
    }
    
    public boolean AlmostAlone(int i, Terrain[] plateau){
        boolean VoisinPresqueSeul=false;
        for (int k=0; k<(Tools.getVoisinsDispo(plateau,i).length); k++){
           if (Tools.getNbVoisinDispo(plateau,Tools.getVoisinsDispo(plateau,i)[k])>=1){
                VoisinPresqueSeul=true;
            }
        }
        return (VoisinPresqueSeul);
    } 
    
    public boolean estVoisinDe(int source, int dest, Terrain[] plateau) {
        int []t = Tools.getVoisinsDispo(plateau,source);
        for (int k=0; k<(t.length); k++){
           if (t[k] == dest){
               return true;
           }
        }
        return (false);
    }
    
    public boolean AlmostVoisinDeMalus(int i, Terrain[] _plateau, int myColor){
        boolean PresqueVoisin = false;
        for (int k=0; k<(Tools.getVoisinsDispo(_plateau,i).length); k++){
            if (MalusVoisin(Tools.getVoisinsDispo(_plateau,i)[k], _plateau, myColor)){
                Destination = i;
                PresqueVoisin = true;
            }
        }
        return (PresqueVoisin);
    }
    
}

